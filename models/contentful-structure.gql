# This is sample SDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker

type Sys {
  id: String @fake(type: uuid)
  spaceId: String @fake(type: uuid)
  environmentId: String @fake(type: uuid)
}

type People {
  sys: Sys
  name: String @fake(type: fullName)
  dateOfJoin: String
    @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  dateOfLeave: String
    @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  dateOfDeath: String
    @fake(type: recentDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  barObituaryLink: String @fake(type: url)
  headshot: Media
  isFifthSection: Boolean
  chorusNumber: Int
  # ... fields
}

fragment People

input PeopleFilter {
  # ... field based filters
  name: String
  isFifthSection: Boolean
  chorusNumber: Int
}

type PeopleCollection {
  skip: Int!
  limit: Int!
  total: Int!
  nodes: [People]!
}

type Media {
  sys: Sys
  title: String @fake(type: lorem, options: { loremSize: words })
  date: String
    @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  type: String @examples(values: ["image"])
  externalUrl: String
    @fake(
      type: imageUrl
      options: { imageHeight: 500, imageWidth: 300, imageCategory: people }
    )
  isAdminEntry: Boolean
  relevantText: String @fake(type: lorem, options: { loremSize: paragraph })
  accessibilityCaption: String
    @fake(type: lorem, options: { loremSize: paragraphs })
  md5sum: String @fake(type: macAddress)
  snaps: Int
}

type GenericMedia {
  sys: Sys
  title: String @fake(type: lorem, options: { loremSize: words })
  date: String
    @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  type: String
    @examples(values: ["image", "video", "youtube", "audio", "spotify"])
  externalUrl: String @fake(type: url)
  isAdminEntry: Boolean
  relevantText: String @fake(type: lorem, options: { loremSize: paragraph })
  accessibilityCaption: String
    @fake(type: lorem, options: { loremSize: paragraphs })
  md5sum: String @fake(type: macAddress)
  snaps: Int
}
# union Media = GenericMedia | ImageMedia
input MediaFilter {
  title: String
  date: String
  type: String
  isAdminEntry: Boolean
  relevantText: String
  accessibilityCaption: String
  md5sum: String
  snaps: Int
}

type MediaCollection {
  skip: Int!
  limit: Int!
  total: Int!
  nodes: [Media]!
}
type Stories {
  title: String @fake(type: lorem, options: { loremSize: words })
  date: String
    @fake(type: pastDate, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss:SSSZ" })
  author: String @fake(type: fullName)
  story: String @fake(type: lorem, options: { loremSize: paragraphs })
  # collections: String
  # alumni: String
  # tags: String
  # media: String
  # locations: String
  # events: String
  # ensambles: String
  snaps: Int
}
input StoriesFilter {
  title: String
  date: String
  author: String
  story: String
  snaps: Int
}

type StoriesCollection {
  skip: Int!
  limit: Int!
  total: Int!
  nodes: [Stories]!
}
type Tags {
  label: String @fake(type: lorem, options: { loremSize: words })
}
input TagsFilter {
  label: String
}

type TagsCollection {
  skip: Int!
  limit: Int!
  total: Int!
  nodes: [Tags]!
}
type Query {
  people(id: String!): People
  peopleCollection(skip: Int, limit: Int, where: PeopleFilter): PeopleCollection
  media(id: String!): Media
  mediaCollection(skip: Int, limit: Int, where: MediaFilter): MediaCollection
  stories(id: String!): Stories
  storiesCollection(
    skip: Int
    limit: Int
    where: StoriesFilter
  ): StoriesCollection
  tags(id: String!): Tags
  tagsCollection(skip: Int, limit: Int, where: TagsFilter): TagsCollection
}
extend type Mutation {
  createStories(input: StoriesFilter!): Stories!
}
